// This file was auto-generated by ML.NET Model Builder.
using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.ML.Data;
using Microsoft.ML.Trainers.FastTree;
using Microsoft.ML.Trainers;
using Microsoft.ML.Transforms;
using Microsoft.ML;

namespace StudentDepressionML
{
    public partial class MLModel1
    {
        public const string RetrainFilePath =  @"C:\Users\yaoting\source\repos\StudentDepressionML\Data\student_depression_dataset.csv";
        public const char RetrainSeparatorChar = ',';
        public const bool RetrainHasHeader =  true;

         /// <summary>
        /// Train a new model with the provided dataset.
        /// </summary>
        /// <param name="outputModelPath">File path for saving the model. Should be similar to "C:\YourPath\ModelName.mlnet"</param>
        /// <param name="inputDataFilePath">Path to the data file for training.</param>
        /// <param name="separatorChar">Separator character for delimited training file.</param>
        /// <param name="hasHeader">Boolean if training file has a header.</param>
        public static void Train(string outputModelPath, string inputDataFilePath = RetrainFilePath, char separatorChar = RetrainSeparatorChar, bool hasHeader = RetrainHasHeader)
        {
            var mlContext = new MLContext();

            var data = LoadIDataViewFromFile(mlContext, inputDataFilePath, separatorChar, hasHeader);
            var model = RetrainModel(mlContext, data);
            SaveModel(mlContext, model, data, outputModelPath);
        }

        /// <summary>
        /// Load an IDataView from a file path.
        /// </summary>
        /// <param name="mlContext">The common context for all ML.NET operations.</param>
        /// <param name="inputDataFilePath">Path to the data file for training.</param>
        /// <param name="separatorChar">Separator character for delimited training file.</param>
        /// <param name="hasHeader">Boolean if training file has a header.</param>
        /// <returns>IDataView with loaded training data.</returns>
        public static IDataView LoadIDataViewFromFile(MLContext mlContext, string inputDataFilePath, char separatorChar, bool hasHeader)
        {
            return mlContext.Data.LoadFromTextFile<ModelInput>(inputDataFilePath, separatorChar, hasHeader);
        }



        /// <summary>
        /// Save a model at the specified path.
        /// </summary>
        /// <param name="mlContext">The common context for all ML.NET operations.</param>
        /// <param name="model">Model to save.</param>
        /// <param name="data">IDataView used to train the model.</param>
        /// <param name="modelSavePath">File path for saving the model. Should be similar to "C:\YourPath\ModelName.mlnet.</param>
        public static void SaveModel(MLContext mlContext, ITransformer model, IDataView data, string modelSavePath)
        {
            // Pull the data schema from the IDataView used for training the model
            DataViewSchema dataViewSchema = data.Schema;

            using (var fs = File.Create(modelSavePath))
            {
                mlContext.Model.Save(model, dataViewSchema, fs);
            }
        }


        /// <summary>
        /// Retrains model using the pipeline generated as part of the training process.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <param name="trainData"></param>
        /// <returns></returns>
        public static ITransformer RetrainModel(MLContext mlContext, IDataView trainData)
        {
            var pipeline = BuildPipeline(mlContext);
            var model = pipeline.Fit(trainData);

            return model;
        }


        /// <summary>
        /// build the pipeline that is used from model builder. Use this function to retrain model.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <returns></returns>
        public static IEstimator<ITransformer> BuildPipeline(MLContext mlContext)
        {
            // Data process configuration with pipeline data transformations
            var pipeline = mlContext.Transforms.Categorical.OneHotEncoding(new []{new InputOutputColumnPair(@"Gender", @"Gender"),new InputOutputColumnPair(@"Profession", @"Profession"),new InputOutputColumnPair(@"Sleep Duration", @"Sleep Duration"),new InputOutputColumnPair(@"Dietary Habits", @"Dietary Habits"),new InputOutputColumnPair(@"Have you ever had suicidal thoughts ?", @"Have you ever had suicidal thoughts ?"),new InputOutputColumnPair(@"Family History of Mental Illness", @"Family History of Mental Illness")}, outputKind: OneHotEncodingEstimator.OutputKind.Indicator)      
                                    .Append(mlContext.Transforms.ReplaceMissingValues(new []{new InputOutputColumnPair(@"id", @"id"),new InputOutputColumnPair(@"Age", @"Age"),new InputOutputColumnPair(@"Academic Pressure", @"Academic Pressure"),new InputOutputColumnPair(@"Work Pressure", @"Work Pressure"),new InputOutputColumnPair(@"CGPA", @"CGPA"),new InputOutputColumnPair(@"Study Satisfaction", @"Study Satisfaction"),new InputOutputColumnPair(@"Job Satisfaction", @"Job Satisfaction"),new InputOutputColumnPair(@"Work/Study Hours", @"Work/Study Hours"),new InputOutputColumnPair(@"Financial Stress", @"Financial Stress")}))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"City",outputColumnName:@"City"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"Degree",outputColumnName:@"Degree"))      
                                    .Append(mlContext.Transforms.Concatenate(@"Features", new []{@"Gender",@"Profession",@"Sleep Duration",@"Dietary Habits",@"Have you ever had suicidal thoughts ?",@"Family History of Mental Illness",@"id",@"Age",@"Academic Pressure",@"Work Pressure",@"CGPA",@"Study Satisfaction",@"Job Satisfaction",@"Work/Study Hours",@"Financial Stress",@"City",@"Degree"}))      
                                    .Append(mlContext.Transforms.Conversion.MapValueToKey(outputColumnName:@"Depression",inputColumnName:@"Depression",addKeyValueAnnotationsAsText:false))      
                                    .Append(mlContext.MulticlassClassification.Trainers.OneVersusAll(binaryEstimator:mlContext.BinaryClassification.Trainers.FastTree(new FastTreeBinaryTrainer.Options(){NumberOfLeaves=13,MinimumExampleCountPerLeaf=12,NumberOfTrees=25,MaximumBinCountPerFeature=151,FeatureFraction=0.99999999,LearningRate=0.263196267255067,LabelColumnName=@"Depression",FeatureColumnName=@"Features"}),labelColumnName: @"Depression"))      
                                    .Append(mlContext.Transforms.Conversion.MapKeyToValue(outputColumnName:@"PredictedLabel",inputColumnName:@"PredictedLabel"));

            return pipeline;
        }
    }
 }
